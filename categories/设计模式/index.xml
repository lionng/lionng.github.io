<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on Welcome</title>
    <link>https://lionng.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on Welcome</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 30 Aug 2019 07:15:38 +0800</lastBuildDate><atom:link href="https://lionng.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>行为型模式-备忘录模式</title>
      <link>https://lionng.github.io/post/memento-pattern/</link>
      <pubDate>Fri, 30 Aug 2019 07:15:38 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/memento-pattern/</guid>
      <description>百度百科 备忘录模式 备忘录模式是一种软件设计模式：在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对</description>
    </item>
    
    <item>
      <title>行为型模式-解释器模式</title>
      <link>https://lionng.github.io/post/interpreter-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 22:45:54 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/interpreter-pattern/</guid>
      <description>百度百科 Interpreter模式 Interpreter(解释器)模式是一种特殊的设计模式，它建立一个解释器（Interpreter），对于</description>
    </item>
    
    <item>
      <title>结构型模式-组合模式</title>
      <link>https://lionng.github.io/post/composite-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 22:04:46 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/composite-pattern/</guid>
      <description>百度百科 组合模式 组合模式，将对象组合成树形结构以表示“部分-整体”的层次结构，组合模式使得用户对单个对象和组合对象的使用具有一致性。掌握组合</description>
    </item>
    
    <item>
      <title>行为型模式-访问者模式</title>
      <link>https://lionng.github.io/post/visitor-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 10:33:48 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/visitor-pattern/</guid>
      <description>维基百科 访问者模式 访问者模式是一种将算法与对象结构分离的软件设计模式。 这个模式的基本想法如下：首先我们拥有一个由许多对象构成的对象结构，这些</description>
    </item>
    
    <item>
      <title>行为型模式-模板方法</title>
      <link>https://lionng.github.io/post/template-method-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 10:13:54 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/template-method-pattern/</guid>
      <description>维基百科 模板方法 模板方法模型是一种行为设计模型。模板方法是一个定义在父类别的方法，在模板方法中会呼叫多个定义在父类别的其他方法，而这些方法有</description>
    </item>
    
    <item>
      <title>行为型模式-策略模式</title>
      <link>https://lionng.github.io/post/strategy-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 06:55:54 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/strategy-pattern/</guid>
      <description>维基百科 策略模式 策略模式作为一种软件设计模式，指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。比如每个人都要“交个人所得税”，</description>
    </item>
    
    <item>
      <title>行为型模式-状态模式</title>
      <link>https://lionng.github.io/post/state-pattern/</link>
      <pubDate>Thu, 29 Aug 2019 06:30:46 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/state-pattern/</guid>
      <description>百度百科 状态模式 (State Pattern)是设计模式的一种，属于行为模式。 允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类 定义</description>
    </item>
    
    <item>
      <title>行为型模式-观察者模式</title>
      <link>https://lionng.github.io/post/observer-pattern/</link>
      <pubDate>Tue, 27 Aug 2019 08:55:07 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/observer-pattern/</guid>
      <description>维基百科 观察者模式 观察者模式是软件设计模式的一种。在此种模式中，一个目标对象管理所有相依于它的观察者对象，并且在它本身的状态改变时主动发出通</description>
    </item>
    
    <item>
      <title>行为型模式-中介者模式</title>
      <link>https://lionng.github.io/post/mediator-pattern/</link>
      <pubDate>Mon, 26 Aug 2019 23:28:40 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/mediator-pattern/</guid>
      <description>维基百科 中介者模式 在软件工程领域，中介者模式定义了一个中介者对象，该对象封装了系统中对象间的交互方式。 由于它可以在运行时改变程序的行为，这种</description>
    </item>
    
    <item>
      <title>行为型模式-迭代器模式</title>
      <link>https://lionng.github.io/post/iterator-pattern/</link>
      <pubDate>Mon, 26 Aug 2019 15:47:11 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/iterator-pattern/</guid>
      <description>维基百科 迭代器模式 在 面向对象编程里，迭代器模式是一种设计模式，是一种最简单也最常见的设计模式。它可以让用户透过特定的接口巡访容器中的每一个元</description>
    </item>
    
    <item>
      <title>行为型模式-命令模式</title>
      <link>https://lionng.github.io/post/command-pattern/</link>
      <pubDate>Mon, 26 Aug 2019 11:33:26 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/command-pattern/</guid>
      <description>维基百科 命令模式 在面向对象编程的范畴中，命令模式（英语：Command pattern）是一种设计模式，它尝试以对象来代表实际行动。命令对象可</description>
    </item>
    
    <item>
      <title>行为型模式-责任链模式</title>
      <link>https://lionng.github.io/post/responsibility-chain-pattern/</link>
      <pubDate>Mon, 26 Aug 2019 08:54:49 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/responsibility-chain-pattern/</guid>
      <description>维基百科 责任链模式 责任链模式在面向对象程式设计里是一种软件设计模式，它包含了一些命令对象和一系列的处理对象。每一个处理对象决定它能处理哪些命</description>
    </item>
    
    <item>
      <title>结构型模式-代理模式</title>
      <link>https://lionng.github.io/post/proxy-pattern/</link>
      <pubDate>Sun, 25 Aug 2019 22:46:31 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/proxy-pattern/</guid>
      <description>维基百科 代理模式 代理模式（英语：Proxy Pattern）是程序设计中的一种设计模式。 所谓的代理者是指一个类别可以作为其它东西的接口。代理者</description>
    </item>
    
    <item>
      <title>结构型模式-享元模式</title>
      <link>https://lionng.github.io/post/flyweight-pattern/</link>
      <pubDate>Sun, 25 Aug 2019 10:51:19 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/flyweight-pattern/</guid>
      <description>维基百科 享元模式 享元模式（英语：Flyweight Pattern）是一种软件设计模式。它使用共享物件，用来尽可能减少内存使用量以及分享资讯给</description>
    </item>
    
    <item>
      <title>结构型模式-外观模式</title>
      <link>https://lionng.github.io/post/facade-pattern/</link>
      <pubDate>Sun, 25 Aug 2019 10:20:54 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/facade-pattern/</guid>
      <description>维基百科 外观模式 外观模式（Facade pattern），是软件工程中常用的一种软件设计模式，它为子系统中的一组接口提供一个统一的高层接口，使</description>
    </item>
    
    <item>
      <title>结构型模式-装饰模式</title>
      <link>https://lionng.github.io/post/decorator-pattern/</link>
      <pubDate>Sun, 25 Aug 2019 09:31:07 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/decorator-pattern/</guid>
      <description>维基百科 修饰模式 修饰模式，是面向对象编程领域中，一种动态地往一个类中添加新的行为的设计模式。就功能而言，修饰模式相比生成子类更为灵活，这样可</description>
    </item>
    
    <item>
      <title>结构型模式-桥接模式</title>
      <link>https://lionng.github.io/post/bridge-pattern/</link>
      <pubDate>Sat, 24 Aug 2019 21:46:01 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/bridge-pattern/</guid>
      <description>维基百科 桥接模式 桥接模式是软件设计模式中最复杂的模式之一，它把事物对象和其具体行为、具体特征分离开来，使它们可以各自独立的变化。事物对象仅是</description>
    </item>
    
    <item>
      <title>结构型模式-适配器模式</title>
      <link>https://lionng.github.io/post/adapter-pattern/</link>
      <pubDate>Sat, 24 Aug 2019 21:12:02 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/adapter-pattern/</guid>
      <description>维基百科 适配器模式 在设计模式中，适配器模式（英语：adapter pattern）有时候也称包装样式或者包装(wrapper)。将一个类的接口</description>
    </item>
    
    <item>
      <title>创建型模式-原型模式</title>
      <link>https://lionng.github.io/post/prototype/</link>
      <pubDate>Sat, 24 Aug 2019 18:43:05 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/prototype/</guid>
      <description>维基百科 原型模式 原型模式是创建型模式的一种，其特点在于通过“复制”一个已经存在的实例来返回新的实例,而不是新建实例。被复制的实例就是我们所称</description>
    </item>
    
    <item>
      <title>创建型模式-单例模式</title>
      <link>https://lionng.github.io/post/single-case-pattern/</link>
      <pubDate>Fri, 23 Aug 2019 17:53:58 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/single-case-pattern/</guid>
      <description>维基百科 单例模式 单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只</description>
    </item>
    
    <item>
      <title>创建型模式-建造者模式</title>
      <link>https://lionng.github.io/post/builder-pattern/</link>
      <pubDate>Fri, 23 Aug 2019 16:48:38 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/builder-pattern/</guid>
      <description>维基百科 生成器模式 生成器模式（英：Builder Pattern）是一种设计模式，又名：建造模式，是一种对象构建模式。它可以将复杂对象的建造过</description>
    </item>
    
    <item>
      <title>创建型模式-抽象工厂</title>
      <link>https://lionng.github.io/post/abstract-factory/</link>
      <pubDate>Mon, 19 Aug 2019 16:02:50 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/abstract-factory/</guid>
      <description>维基百科 抽象工厂 抽象工厂模式（英语：Abstract factory pattern）是一种软件开发设计模式。抽象工厂模式提供了一种方式，可以将一组具有同一</description>
    </item>
    
    <item>
      <title>创建型模式-工厂方法</title>
      <link>https://lionng.github.io/post/factory-method/</link>
      <pubDate>Mon, 19 Aug 2019 15:56:21 +0800</pubDate>
      
      <guid>https://lionng.github.io/post/factory-method/</guid>
      <description>维基百科 工厂方法 工厂方法模式（英语：Factory method pattern）是一种实现了“工厂”概念的面向对象设计模式。就像其他创建型模式一样，它也</description>
    </item>
    
  </channel>
</rss>
